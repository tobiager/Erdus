import type { IRSchema } from '../../ir';
import { toSupabaseSQL } from '../../generators/supabase';

export interface PostgresOptions {
  schema?: string;
  withRLS?: boolean;
  preserveComments?: boolean;
  addTimestamps?: boolean;
}

export function emitPostgres(ir: IRSchema, options: PostgresOptions = {}): string {
  const opts = {
    schema: 'public',
    withRLS: false,
    preserveComments: true,
    ...options,
  };

  // Use the existing Supabase generator with options
  const supabaseOptions = {
    schema: opts.schema,
    withRLS: opts.withRLS,
    includeComments: opts.preserveComments,
    enableExtensions: true,
  };

  let sql = toSupabaseSQL(ir, supabaseOptions);

  // Add migration-specific header
  const header = [
    '-- Database Migration Script',
    '-- Generated by Erdus Migration Tool',
    `-- Target: PostgreSQL/Supabase (schema: ${opts.schema})`,
    `-- Generated at: ${new Date().toISOString()}`,
    '',
  ].join('\n');

  sql = header + sql;

  // Add timestamps to tables if requested
  if (opts.addTimestamps) {
    sql = addTimestampColumns(sql, ir);
  }

  return sql;
}

function addTimestampColumns(sql: string, ir: IRSchema): string {
  const timestampColumns = `
  created_at timestamp with time zone DEFAULT now() NOT NULL,
  updated_at timestamp with time zone DEFAULT now() NOT NULL`;

  // Add timestamp columns to each CREATE TABLE statement
  const modifiedSQL = sql.replace(
    /CREATE TABLE\s+(\w+(?:\.\w+)?)\s*\(\s*(.*?)\s*\);/gis,
    (match, tableName, columns) => {
      // Check if table already has timestamp columns
      if (columns.includes('created_at') || columns.includes('updated_at')) {
        return match;
      }
      
      return `CREATE TABLE ${tableName} (\n  ${columns},${timestampColumns}\n);`;
    }
  );

  return modifiedSQL;
}